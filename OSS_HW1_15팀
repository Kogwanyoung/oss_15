제목 : 전자와 컴공의 필수 소프트웨어, Visual Studio
팀원 : 전자공학부/2020115968/고관영/Kogwanyoung
       전자공학부/(학번)/설성원/Salbo1203
       컴퓨터학부/(학번)/손영민/ymandu
       전자공학부/(학번)/신은영/eunyeong1
       컴퓨터학부/2019111424/이상현/19SangHyun


1. 개요 
: Visual Studio는 Microsoft에서 개발한 통합 개발 환경(IDE)으로, 주로 소프트웨어 개발을 위한 도구이다. 다양한 프로그래밍 언어를
지원하며, C#, VB.NET, C++, F#, JavaScript, Python 등 여러 언어로 애플리케이션을 개발할 수 있다. 주요 기능으로는 코드 편집기 및
AI 기반 코드 보조, 디버깅 도구, 버전 관리 통합 기능, 확장 기능 및 Live Share, 클라우드 통합 등이 있다. Visual Studio는 웹 애플
리케이션, 데스크톱 애플리케이션, 모바일 애플리케이션 등 다양한 플랫폼을 위한 개발을 지원하며, 특히 .NET 프레임워크와의 통합이 
강력하다. 또한, Visual Studio는 커뮤니티 버전, 프로페셔널 버전, 엔터프라이즈 버전 등 여러 에디션이 있어, 개인 개발자부터 대규모 
기업까지 다양한 사용자의 요구를 충족할 수 있다.


2. 라이선스 
1) Visual Studio 라이선스 종류와 조건
(1) Visual Studio Community
- 무료로 제공되며, 개인 개발자 및 소규모 팀(5명 이하)에서 사용할 수 있으며, 오픈소스 프로젝트, 학습 및 교육 목적으로 사용 가능하다.
- 상업적 사용 시 연간 수익이 $1,000,000 이하인 경우에만 사용 가능하다.

(2) Visual Studio Professional
- 유료 라이선스로, 중소 기업 및 전문 개발자에게 적합하다.
- 가격 : 월 $45
- 특징
① Azure DevOps (기본 플랜 포함)
② GitHub Enterprise 사용 가능
③ 개발 및 테스트 소프트웨어 제공

(3) Visual Studio Enterprise
- 대규모 기업을 위한 유료 라이선스이다.
- 가격 : 월 $250
- 특징
① Azure DevOps (기본 + 테스트 플랜 포함)
② GitHub Enterprise 사용 가능
③ Power BI Pro 포함
④ 더 많은 개발 및 테스트 도구와 서비스 제공

2) 오픈소스 라이선스
(1) MIT 라이선스 
: 매우 간단하고 자유로운 라이선스이다. 소스 코드를 수정하고 배포할 수 있으며, 상업적 사용도 가능하다.

(2) GNU GPL(General Public License) 
: 소스 코드를 수정하고 배포할 수 있지만, 수정된 코드도 동일한 라이선스 하에 배포해야 한다.

(3) Apache 라이선스
: 소스 코드의 사용, 수정, 배포를 허용하며, 상업적 사용도 가능하다. 특허권에 대한 조항이 포함되어 있다.

(4) BSD 라이선스
: 소스 코드의 사용과 배포를 허용하며, 수정된 코드에 대한 제한이 상대적으로 적다.


3. 주요기능 
1) 코드 편집기 & AI 기반 코드 보조

2) 디버깅 도구
(1) 디버깅 도구란?
디버깅 도구는 개발자가 코드의 문제를 찾고 수정하기 위해 사용하는 기능으로, 프로그램의 실행 중 발생하는 오류나 비정상적인 동작을 분석하는 데 도움을 준다.
Visual Studio는 강력한 디버깅 도구를 제공하여 실시간으로 코드의 흐름을 추적하고, 변수를 모니터링하며, 중단점(Breakpoint)을 설정하여
코드의 특정 지점에서 실행을 멈추고 상태를 분석할 수 있다. 디버깅 도구는 개발자가 효율적으로 오류를 찾고 수정할 수 있도록 다양한 기능을 지원한다.

(2) 주요 기능
① 중단점(Breakpoints) 설정: 코드의 특정 라인에서 실행을 일시적으로 멈추게 하는 중단점을 설정하여 해당 시점의 변수 값과 코드 흐름을 분석할 수 있다.
중단점은 코드의 실행 흐름을 세밀하게 조절할 수 있는 중요한 도구이다.

② 단계별 코드 실행(Step Over, Step Into, Step Out): Visual Studio는 코드를 한 줄씩 실행하며 디버깅할 수 있는 기능을 제공한다.
이를 통해 함수 호출 내로 들어가거나 건너뛰는 등 코드의 흐름을 세밀하게 추적할 수 있다.

③ 변수 값 모니터링 및 수정: 디버깅 중에 변수의 현재 값을 실시간으로 확인할 수 있으며, 변수를 직접 수정하여 코드의 실행 결과에 미치는 영향을 즉시 확인할 수 있다.
이를 통해 예상치 못한 값이나 논리 오류를 빠르게 발견할 수 있다.

④ 자동 및 로컬 변수 검사: Visual Studio는 현재 코드에서 사용되는 변수의 상태를 자동으로 보여주는 "자동 변수(Autos)"와 "로컬 변수(Locals)" 창을 제공한다.
이를 통해 변수의 상태를 쉽게 추적하고 분석할 수 있다.

⑤ 호출 스택(Call Stack) 추적: 호출 스택을 통해 현재 함수가 호출된 경로를 추적할 수 있으며, 디버깅 중인 프로그램이 어떻게 실행되고 있는지를 전체적으로 파악할 수 있다.
이를 통해 함수 호출 간의 관계를 이해하고, 어디에서 오류가 발생했는지를 확인할 수 있다.

⑥ 예외 처리 및 분석: Visual Studio의 디버깅 도구는 예외(Exception)가 발생했을 때 해당 예외를 분석할 수 있는 기능을 제공한다.
이를 통해 예외 발생 원인을 파악하고 코드에서 적절히 예외를 처리할 수 있다.

⑦ 실시간 실행 및 상태 감시: 디버깅 중에 프로그램을 계속 실행하거나 일시 정지 상태에서 특정 조건에 맞는 실행을 감시할 수 있다.
조건부 중단점(Conditional Breakpoints)을 설정하여 특정 조건을 만족할 때만 실행을 멈출 수도 있다.

(3) 장점
① 실시간 오류 분석: 디버깅 도구를 통해 코드를 실행 중에 실시간으로 문제를 발견하고 해결할 수 있어 빠르고 효율적인 오류 수정을 가능하게 한다.

② 세밀한 코드 흐름 추적: 중단점과 단계별 실행 기능을 활용하면 코드의 실행 흐름을 세밀하게 추적하여 논리적 오류나 예외를 쉽게 찾아낼 수 있다.

(4) 사용 방법
① 중단점 설정: 디버깅을 시작하기 전, 중단하고 싶은 코드 라인에 중단점을 설정한다. 코드를 실행하면 해당 중단점에서 프로그램이 멈춘다.

② 코드 실행: Visual Studio에서 디버깅 모드를 시작하여 프로그램을 실행한다. 중단점에 도달하면 프로그램이 일시 정지하고, 현재 상태를 분석할 수 있다.

③ 단계별 디버깅: 프로그램이 중단된 지점에서 코드의 실행을 한 줄씩 진행하며, 변수 값과 함수 호출 상태를 추적할 수 있다.

④ 변수 모니터링: 디버깅 중 자동 변수 창과 로컬 변수 창을 통해 변수의 현재 값을 모니터링하고 필요한 경우 값을 수정할 수 있다.

⑤ 예외 처리 분석: 예외가 발생하면 Visual Studio는 예외 정보를 제공하고, 이를 통해 오류의 원인을 분석하여 수정할 수 있다.

⑥ 디버깅 종료: 문제를 확인하고 수정한 후, 디버깅 모드를 종료하고 프로그램을 다시 실행하여 수정 사항이 제대로 적용되었는지 확인한다.



3) 버전 관리 통합 기능
(1) 버전 관리 통합 기능이란? 
: 버전 관리 통합 기능은 Visual Studio가 Git과 같은 버전 관리 시스템(VCS, Version Control System)을 IDE 내에서 직접 지원하는 기능
이다. 이를 통해 개발자는 코드의 변경 이력을 관리하고, 여러 팀원과의 협업을 효율적으로 진행할 수 있다. Visual Studio는 Git뿐만 아니
라 Azure DevOps와 같은 다른 버전 관리 시스템도 지원한다.

(2) 주요 기능
① 소스 코드 버전 관리 : 사용자는 코드의 변경 사항을 커밋하여 특정 시점의 상태를 저장할 수 있다. 이를 통해 이전 버전으로 쉽게 되돌아
갈 수 있으며, 코드의 변경 이력을 추적할 수 있다.
② 변경 사항 비교 : Visual Studio는 현재 작업 중인 파일과 이전 커밋 간의 차이를 쉽게 비교할 수 있는 기능을 제공한다. 이를 통해 어떤 
변경이 있었는지 시각적으로 확인할 수 있다.
③ 브랜치 관리 : 브랜치를 생성하고 관리하는 기능을 제공한다. 각 브랜치는 독립적으로 개발이 가능하여 주요 코드에 영향을 주지 않고 기능
추가나 버그 수정을 할 수 있으며, 브랜치를 사용하여 개발 후 메인 코드에 통합할 수 있다.
④ 협업 및 팀 작업 : 팀원들이 각자의 브랜치에서 작업한 후, 코드 리뷰를 거쳐 메인 브랜치에 통합할 수 있어 팀원 간의 협업이 용이하다. 
Visual Studio는 이러한 리뷰 과정을 지원하는 도구들도 포함하고 있다.
⑤ GitHub 통합 : Visual Studio는 GitHub과의 통합 기능을 제공하여, GitHub 저장소에 직접 연결하여 코드 변경 사항을 푸시(업로드)하거나 
풀(다운로드)할 수 있다. GitHub Issues 및 Pull Requests를 관리할 수 있는 기능도 포함되어 있어, 프로젝트 관리가 한층 수월해진다.

(3) 장점
① 변경 이력 관리 : 코드의 모든 변경 사항을 기록하고 관리할 수 있어, 어떤 내용을 누가 어느 시점에 작성했는지 알 수 있다.
② 백업 및 복구 : 문제가 발생했을 때 특정 시점으로 쉽게 돌아갈 수 있기 때문에, 내용이 손실된 경우에도 복구할 수 있다.
③ 효율적인 팀 협업 : 팀원 간의 코드 리뷰와 변경 사항 공유가 용이해서, 프로젝트 품질을 높일 수 있다.

(4) 사용 방법 
① 프로젝트 생성 또는 열기 : Visual Studio를 열고 새 프로젝트를 생성하거나 기존 프로젝트를 연다.
② 버전 관리 시스템 설정 : Git 리포지토리를 초기화하려면, '팀 탐색기(Team Explorer)'에서 '새 리포지토리'를 선택하고, 기존 리포지토리를 
클론하려면, '팀 탐색기'에서 '클론'을 선택하고 URL을 입력한다.
③ 변경 사항 관리 : 코드 변경 후, '팀 탐색기'에서 변경 사항을 선택하여 변경된 파일을 확인한다. 변경 사항을 스테이징하고 커밋할 수 있다.
④ 브랜치 생성 및 관리 : '팀 탐색기'에서 브랜치를 선택하여 새로운 브랜치를 만들거나 기존 브랜치로 전환할 수 있다.
⑤ Pull Request 생성 : GitHub 또는 Azure DevOps와 통합된 경우, '팀 탐색기'에서 Pull Request를 생성하여 코드 리뷰를 요청할 수 있다.
⑥ 충돌 해결 : 코드 충돌이 발생하면, Visual Studio에서 제공하는 도구를 사용하여 충돌을 해결할 수 있다.

4) 확장 기능 & Live Share

5) 클라우드 통합 (Azure Integration)
